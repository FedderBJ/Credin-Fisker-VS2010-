//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace WindowsFormsApplication1.BalanceWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BalanceWS_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS")]
    public partial class BalanceWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WSAddPalletToQueOperationCompleted;
        
        private System.Threading.SendOrPostCallback WSCreateSSCCDataFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback WSReturnParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback WSNewPalletExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback WSRenameNewPalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback WSRemovePalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback WSMoveQueForwardOperationCompleted;
        
        private System.Threading.SendOrPostCallback WSIsDummyPalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback WSReturnServiceParamOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BalanceWS() {
            this.Url = global::WindowsFormsApplication1.Properties.Settings.Default.WindowsFormsApplication1_BalanceWS_BalanceWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WSAddPalletToQueCompletedEventHandler WSAddPalletToQueCompleted;
        
        /// <remarks/>
        public event WSCreateSSCCDataFileCompletedEventHandler WSCreateSSCCDataFileCompleted;
        
        /// <remarks/>
        public event WSReturnParamCompletedEventHandler WSReturnParamCompleted;
        
        /// <remarks/>
        public event WSNewPalletExistCompletedEventHandler WSNewPalletExistCompleted;
        
        /// <remarks/>
        public event WSRenameNewPalletCompletedEventHandler WSRenameNewPalletCompleted;
        
        /// <remarks/>
        public event WSRemovePalletCompletedEventHandler WSRemovePalletCompleted;
        
        /// <remarks/>
        public event WSMoveQueForwardCompletedEventHandler WSMoveQueForwardCompleted;
        
        /// <remarks/>
        public event WSIsDummyPalletCompletedEventHandler WSIsDummyPalletCompleted;
        
        /// <remarks/>
        public event WSReturnServiceParamCompletedEventHandler WSReturnServiceParamCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSAddPalletToQue", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSAddPalletToQue_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSAddPalletToQue(string sSCC) {
            object[] results = this.Invoke("WSAddPalletToQue", new object[] {
                        sSCC});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSAddPalletToQueAsync(string sSCC) {
            this.WSAddPalletToQueAsync(sSCC, null);
        }
        
        /// <remarks/>
        public void WSAddPalletToQueAsync(string sSCC, object userState) {
            if ((this.WSAddPalletToQueOperationCompleted == null)) {
                this.WSAddPalletToQueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSAddPalletToQueOperationCompleted);
            }
            this.InvokeAsync("WSAddPalletToQue", new object[] {
                        sSCC}, this.WSAddPalletToQueOperationCompleted, userState);
        }
        
        private void OnWSAddPalletToQueOperationCompleted(object arg) {
            if ((this.WSAddPalletToQueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSAddPalletToQueCompleted(this, new WSAddPalletToQueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSCreateSSCCDataFile", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSCreateSSCCDataFile_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSCreateSSCCDataFile() {
            object[] results = this.Invoke("WSCreateSSCCDataFile", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSCreateSSCCDataFileAsync() {
            this.WSCreateSSCCDataFileAsync(null);
        }
        
        /// <remarks/>
        public void WSCreateSSCCDataFileAsync(object userState) {
            if ((this.WSCreateSSCCDataFileOperationCompleted == null)) {
                this.WSCreateSSCCDataFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSCreateSSCCDataFileOperationCompleted);
            }
            this.InvokeAsync("WSCreateSSCCDataFile", new object[0], this.WSCreateSSCCDataFileOperationCompleted, userState);
        }
        
        private void OnWSCreateSSCCDataFileOperationCompleted(object arg) {
            if ((this.WSCreateSSCCDataFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSCreateSSCCDataFileCompleted(this, new WSCreateSSCCDataFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSReturnParam", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSReturnParam_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSReturnParam(
                    ref string iP, 
                    ref string port, 
                    ref string timeOut, 
                    ref string scanCh, 
                    ref string wrapCh, 
                    ref string palletReadyCh, 
                    ref string labelSendCh, 
                    ref string palletFinished, 
                    ref string doSignalTimer, 
                    ref string diSignalTimer, 
                    ref string eidosPrintIp, 
                    ref string eidosPrintPort, 
                    ref int newPalletNoIs, 
                    ref string sSCCLabelPath, 
                    ref string sSCCLabelName, 
                    ref bool deleteFile, 
                    ref int doWrapOnly) {
            object[] results = this.Invoke("WSReturnParam", new object[] {
                        iP,
                        port,
                        timeOut,
                        scanCh,
                        wrapCh,
                        palletReadyCh,
                        labelSendCh,
                        palletFinished,
                        doSignalTimer,
                        diSignalTimer,
                        eidosPrintIp,
                        eidosPrintPort,
                        newPalletNoIs,
                        sSCCLabelPath,
                        sSCCLabelName,
                        deleteFile,
                        doWrapOnly});
            iP = ((string)(results[1]));
            port = ((string)(results[2]));
            timeOut = ((string)(results[3]));
            scanCh = ((string)(results[4]));
            wrapCh = ((string)(results[5]));
            palletReadyCh = ((string)(results[6]));
            labelSendCh = ((string)(results[7]));
            palletFinished = ((string)(results[8]));
            doSignalTimer = ((string)(results[9]));
            diSignalTimer = ((string)(results[10]));
            eidosPrintIp = ((string)(results[11]));
            eidosPrintPort = ((string)(results[12]));
            newPalletNoIs = ((int)(results[13]));
            sSCCLabelPath = ((string)(results[14]));
            sSCCLabelName = ((string)(results[15]));
            deleteFile = ((bool)(results[16]));
            doWrapOnly = ((int)(results[17]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSReturnParamAsync(
                    string iP, 
                    string port, 
                    string timeOut, 
                    string scanCh, 
                    string wrapCh, 
                    string palletReadyCh, 
                    string labelSendCh, 
                    string palletFinished, 
                    string doSignalTimer, 
                    string diSignalTimer, 
                    string eidosPrintIp, 
                    string eidosPrintPort, 
                    int newPalletNoIs, 
                    string sSCCLabelPath, 
                    string sSCCLabelName, 
                    bool deleteFile, 
                    int doWrapOnly) {
            this.WSReturnParamAsync(iP, port, timeOut, scanCh, wrapCh, palletReadyCh, labelSendCh, palletFinished, doSignalTimer, diSignalTimer, eidosPrintIp, eidosPrintPort, newPalletNoIs, sSCCLabelPath, sSCCLabelName, deleteFile, doWrapOnly, null);
        }
        
        /// <remarks/>
        public void WSReturnParamAsync(
                    string iP, 
                    string port, 
                    string timeOut, 
                    string scanCh, 
                    string wrapCh, 
                    string palletReadyCh, 
                    string labelSendCh, 
                    string palletFinished, 
                    string doSignalTimer, 
                    string diSignalTimer, 
                    string eidosPrintIp, 
                    string eidosPrintPort, 
                    int newPalletNoIs, 
                    string sSCCLabelPath, 
                    string sSCCLabelName, 
                    bool deleteFile, 
                    int doWrapOnly, 
                    object userState) {
            if ((this.WSReturnParamOperationCompleted == null)) {
                this.WSReturnParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSReturnParamOperationCompleted);
            }
            this.InvokeAsync("WSReturnParam", new object[] {
                        iP,
                        port,
                        timeOut,
                        scanCh,
                        wrapCh,
                        palletReadyCh,
                        labelSendCh,
                        palletFinished,
                        doSignalTimer,
                        diSignalTimer,
                        eidosPrintIp,
                        eidosPrintPort,
                        newPalletNoIs,
                        sSCCLabelPath,
                        sSCCLabelName,
                        deleteFile,
                        doWrapOnly}, this.WSReturnParamOperationCompleted, userState);
        }
        
        private void OnWSReturnParamOperationCompleted(object arg) {
            if ((this.WSReturnParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSReturnParamCompleted(this, new WSReturnParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSNewPalletExist", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSNewPalletExist_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSNewPalletExist(int nummer) {
            object[] results = this.Invoke("WSNewPalletExist", new object[] {
                        nummer});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSNewPalletExistAsync(int nummer) {
            this.WSNewPalletExistAsync(nummer, null);
        }
        
        /// <remarks/>
        public void WSNewPalletExistAsync(int nummer, object userState) {
            if ((this.WSNewPalletExistOperationCompleted == null)) {
                this.WSNewPalletExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSNewPalletExistOperationCompleted);
            }
            this.InvokeAsync("WSNewPalletExist", new object[] {
                        nummer}, this.WSNewPalletExistOperationCompleted, userState);
        }
        
        private void OnWSNewPalletExistOperationCompleted(object arg) {
            if ((this.WSNewPalletExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSNewPalletExistCompleted(this, new WSNewPalletExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSRenameNewPallet", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSRenameNewPallet_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSRenameNewPallet(int nummer) {
            object[] results = this.Invoke("WSRenameNewPallet", new object[] {
                        nummer});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSRenameNewPalletAsync(int nummer) {
            this.WSRenameNewPalletAsync(nummer, null);
        }
        
        /// <remarks/>
        public void WSRenameNewPalletAsync(int nummer, object userState) {
            if ((this.WSRenameNewPalletOperationCompleted == null)) {
                this.WSRenameNewPalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSRenameNewPalletOperationCompleted);
            }
            this.InvokeAsync("WSRenameNewPallet", new object[] {
                        nummer}, this.WSRenameNewPalletOperationCompleted, userState);
        }
        
        private void OnWSRenameNewPalletOperationCompleted(object arg) {
            if ((this.WSRenameNewPalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSRenameNewPalletCompleted(this, new WSRenameNewPalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSRemovePallet", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSRemovePallet_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSRemovePallet() {
            object[] results = this.Invoke("WSRemovePallet", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSRemovePalletAsync() {
            this.WSRemovePalletAsync(null);
        }
        
        /// <remarks/>
        public void WSRemovePalletAsync(object userState) {
            if ((this.WSRemovePalletOperationCompleted == null)) {
                this.WSRemovePalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSRemovePalletOperationCompleted);
            }
            this.InvokeAsync("WSRemovePallet", new object[0], this.WSRemovePalletOperationCompleted, userState);
        }
        
        private void OnWSRemovePalletOperationCompleted(object arg) {
            if ((this.WSRemovePalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSRemovePalletCompleted(this, new WSRemovePalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSMoveQueForward", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSMoveQueForward_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSMoveQueForward() {
            object[] results = this.Invoke("WSMoveQueForward", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSMoveQueForwardAsync() {
            this.WSMoveQueForwardAsync(null);
        }
        
        /// <remarks/>
        public void WSMoveQueForwardAsync(object userState) {
            if ((this.WSMoveQueForwardOperationCompleted == null)) {
                this.WSMoveQueForwardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSMoveQueForwardOperationCompleted);
            }
            this.InvokeAsync("WSMoveQueForward", new object[0], this.WSMoveQueForwardOperationCompleted, userState);
        }
        
        private void OnWSMoveQueForwardOperationCompleted(object arg) {
            if ((this.WSMoveQueForwardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSMoveQueForwardCompleted(this, new WSMoveQueForwardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSIsDummyPallet", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSIsDummyPallet_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSIsDummyPallet() {
            object[] results = this.Invoke("WSIsDummyPallet", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSIsDummyPalletAsync() {
            this.WSIsDummyPalletAsync(null);
        }
        
        /// <remarks/>
        public void WSIsDummyPalletAsync(object userState) {
            if ((this.WSIsDummyPalletOperationCompleted == null)) {
                this.WSIsDummyPalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSIsDummyPalletOperationCompleted);
            }
            this.InvokeAsync("WSIsDummyPallet", new object[0], this.WSIsDummyPalletOperationCompleted, userState);
        }
        
        private void OnWSIsDummyPalletOperationCompleted(object arg) {
            if ((this.WSIsDummyPalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSIsDummyPalletCompleted(this, new WSIsDummyPalletCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/BalanceWS:WSReturnServiceParam", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", ResponseElementName="WSReturnServiceParam_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/BalanceWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public bool WSReturnServiceParam(ref string navServer, ref string navDomUserName, ref string navDomUserPass, ref string navServiceName, ref bool navServiceIsLocal) {
            object[] results = this.Invoke("WSReturnServiceParam", new object[] {
                        navServer,
                        navDomUserName,
                        navDomUserPass,
                        navServiceName,
                        navServiceIsLocal});
            navServer = ((string)(results[1]));
            navDomUserName = ((string)(results[2]));
            navDomUserPass = ((string)(results[3]));
            navServiceName = ((string)(results[4]));
            navServiceIsLocal = ((bool)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WSReturnServiceParamAsync(string navServer, string navDomUserName, string navDomUserPass, string navServiceName, bool navServiceIsLocal) {
            this.WSReturnServiceParamAsync(navServer, navDomUserName, navDomUserPass, navServiceName, navServiceIsLocal, null);
        }
        
        /// <remarks/>
        public void WSReturnServiceParamAsync(string navServer, string navDomUserName, string navDomUserPass, string navServiceName, bool navServiceIsLocal, object userState) {
            if ((this.WSReturnServiceParamOperationCompleted == null)) {
                this.WSReturnServiceParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWSReturnServiceParamOperationCompleted);
            }
            this.InvokeAsync("WSReturnServiceParam", new object[] {
                        navServer,
                        navDomUserName,
                        navDomUserPass,
                        navServiceName,
                        navServiceIsLocal}, this.WSReturnServiceParamOperationCompleted, userState);
        }
        
        private void OnWSReturnServiceParamOperationCompleted(object arg) {
            if ((this.WSReturnServiceParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WSReturnServiceParamCompleted(this, new WSReturnServiceParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSAddPalletToQueCompletedEventHandler(object sender, WSAddPalletToQueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSAddPalletToQueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSAddPalletToQueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSCreateSSCCDataFileCompletedEventHandler(object sender, WSCreateSSCCDataFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSCreateSSCCDataFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSCreateSSCCDataFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSReturnParamCompletedEventHandler(object sender, WSReturnParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSReturnParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSReturnParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string iP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string port {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string timeOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string scanCh {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string wrapCh {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string palletReadyCh {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string labelSendCh {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string palletFinished {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string doSignalTimer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string diSignalTimer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string eidosPrintIp {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string eidosPrintPort {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public int newPalletNoIs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string sSCCLabelPath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string sSCCLabelName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public bool deleteFile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public int doWrapOnly {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[17]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSNewPalletExistCompletedEventHandler(object sender, WSNewPalletExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSNewPalletExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSNewPalletExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSRenameNewPalletCompletedEventHandler(object sender, WSRenameNewPalletCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSRenameNewPalletCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSRenameNewPalletCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSRemovePalletCompletedEventHandler(object sender, WSRemovePalletCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSRemovePalletCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSRemovePalletCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSMoveQueForwardCompletedEventHandler(object sender, WSMoveQueForwardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSMoveQueForwardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSMoveQueForwardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSIsDummyPalletCompletedEventHandler(object sender, WSIsDummyPalletCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSIsDummyPalletCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSIsDummyPalletCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WSReturnServiceParamCompletedEventHandler(object sender, WSReturnServiceParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WSReturnServiceParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WSReturnServiceParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string navServer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string navDomUserName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string navDomUserPass {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string navServiceName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool navServiceIsLocal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
    }
}

#pragma warning restore 1591